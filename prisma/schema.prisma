// Schéma Prisma Chinook Corrigé

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id     Int     @id @default(autoincrement()) @map("artist_id")
  name   String? @db.VarChar(120)
  albums Album[]

  @@map("artist")
}

model Album {
  id       Int     @id @default(autoincrement()) @map("album_id")
  title    String  @db.VarChar(160)
  artistId Int     @map("artist_id")
  artist   Artist  @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tracks   Track[]

  @@index([artistId])
  @@map("album")
}

model Genre {
  id     Int     @id @default(autoincrement()) @map("genre_id")
  name   String? @db.VarChar(120)
  tracks Track[]

  @@map("genre")
}

model MediaType {
  id     Int     @id @default(autoincrement()) @map("media_type_id")
  name   String? @db.VarChar(120)
  tracks Track[]

  @@map("media_type")
}

model PlaylistProvider {
  id             Int             @id @default(autoincrement()) @map("playlist_id")
  name           String?         @db.VarChar(120)
  playlistTracks PlaylistTrack[]

  @@map("playlist")
}

model Track {
  id             Int             @id @default(autoincrement()) @map("track_id")
  name           String          @db.VarChar(200)
  albumId        Int?            @map("album_id")
  mediaTypeId    Int             @map("media_type_id")
  genreId        Int?            @map("genre_id")
  composer       String?         @db.VarChar(220)
  milliseconds   Int
  bytes          Int?
  unitPrice      Decimal         @map("unit_price") @db.Decimal(10, 2)
  invoiceLines   InvoiceLine[]
  playlistTracks PlaylistTrack[]
  album          Album?          @relation(fields: [albumId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genre          Genre?          @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mediaType      MediaType       @relation(fields: [mediaTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([albumId])
  @@index([genreId])
  @@index([mediaTypeId])
  @@map("track")
}

model PlaylistTrack {
  playlistId Int      @map("playlist_id")
  trackId    Int      @map("track_id")
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
  @@map("playlist_track")
}

model Employee {
  id           Int        @id @default(autoincrement()) @map("employee_id")
  lastName     String     @map("last_name") @db.VarChar(20)
  firstName    String     @map("first_name") @db.VarChar(20)
  title        String?    @db.VarChar(30)
  reportsTo    Int?       @map("reports_to")
  birthDate    DateTime?  @map("birth_date") @db.Timestamp(6)
  hireDate     DateTime?  @map("hire_date") @db.Timestamp(6)
  address      String?    @db.VarChar(70)
  city         String?    @db.VarChar(40)
  state        String?    @db.VarChar(40)
  country      String?    @db.VarChar(40)
  postalCode   String?    @map("postal_code") @db.VarChar(10)
  phone        String?    @db.VarChar(24)
  fax          String?    @db.VarChar(24)
  email        String?    @db.VarChar(60)
  customers    Customer[]
  manager      Employee?  @relation("EmployeeToEmployee", fields: [reportsTo], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates Employee[] @relation("EmployeeToEmployee")

  @@index([reportsTo])
  @@map("employee")
}

model Customer {
  id           Int       @id @default(autoincrement()) @map("customer_id")
  firstName    String    @map("first_name") @db.VarChar(40)
  lastName     String    @map("last_name") @db.VarChar(20)
  company      String?   @db.VarChar(80)
  address      String?   @db.VarChar(70)
  city         String?   @db.VarChar(40)
  state        String?   @db.VarChar(40)
  country      String?   @db.VarChar(40)
  postalCode   String?   @map("postal_code") @db.VarChar(10)
  phone        String?   @db.VarChar(24)
  fax          String?   @db.VarChar(24)
  email        String    @db.VarChar(60)
  supportRepId Int?      @map("support_rep_id")
  supportRep   Employee? @relation(fields: [supportRepId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoices     Invoice[]

  @@index([supportRepId])
  @@map("customer")
}

model Invoice {
  id                Int           @id @default(autoincrement()) @map("invoice_id")
  customerId        Int           @map("customer_id")
  invoiceDate       DateTime      @map("invoice_date") @db.Timestamp(6)
  billingAddress    String?       @map("billing_address") @db.VarChar(70)
  billingCity       String?       @map("billing_city") @db.VarChar(40)
  billingState      String?       @map("billing_state") @db.VarChar(40)
  billingCountry    String?       @map("billing_country") @db.VarChar(40)
  billingPostalCode String?       @map("billing_postal_code") @db.VarChar(10)
  total             Decimal       @map("total") @db.Decimal(10, 2)
  customer          Customer      @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoiceLines      InvoiceLine[]

  @@index([customerId])
  @@map("invoice")
}

model InvoiceLine {
  id        Int     @id @default(autoincrement()) @map("invoice_line_id")
  invoiceId Int     @map("invoice_id")
  trackId   Int     @map("track_id")
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)
  quantity  Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  track     Track   @relation(fields: [trackId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([invoiceId])
  @@index([trackId])
  @@map("invoice_line")
}
